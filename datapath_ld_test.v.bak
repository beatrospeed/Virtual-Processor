module datapath_tb_ld_1();

	parameter Default = 5'd0, PC_load1a = 5'd1, PC_load1b = 5'd2, 
	T0 = 5'd3, T1 = 5'd4, T2 = 5'd5, T3 = 5'd6, 
	T4 = 5'd7, T5 = 5'd8, T6 = 5'd9, T7 = 5'd10;
	
   reg PCout,Zlowout, MDRout, MARin,Zin,PCin,MDRin, read, write,IRin,Yin,IncPc,clk;
	reg [1:0] mdr_read;
	reg [3:0] control;
	reg HIout, LOout,InPortout, OutPortout,Cout, Zhighout, 
	HIin, LOin, Zhighin, Zlowin, InPortin, Cin, reset,
   BAout,OutPortin,Rin,Rout,GRA, GRB, GRC;
	reg [31:0] Immediate;
	//demonstration ports
	wire [31:0] R0Val,R1Val,R2Val,R3Val,R4Val,R5Val,R6Val,
	R7Val,R8Val,R9Val,R10Val,R11Val,R12Val,R13Val,R14Val,
	R15Val,IRval,bus,MDRval,mux_data_out,YVal,R0TempOut,
	C_sign_extended,InPort_D, OutPort_D, PCVal,CVal,mdatain;
	wire [63:0] ZVal,ALUVal_D;
	
	datapath dp(PCout,Zlowout, MDRout, MARin,Zin,PCin,MDRin, read, write,
	IRin,Yin,IncPc,clkmdr_read, control,HIout, LOout,InPortout, OutPortout,
	Cout, Zhighout,HIin, LOin, Zhighin, Zlowin, InPortin, Cin, reset,
   BAout,OutPortin,Rin,Rout,GRA, GRB, GRCImmediate,R0Val,R1Val,R2Val,R3Val,
	R4Val,R5Val,R6Val,R7Val,R8Val,R9Val,R10Val,R11Val,R12Val,R13Val,R14Val,
	R15Val,IRval,bus,MDRval,mux_data_out,YVal,R0TempOut,
	C_sign_extended,InPort_D, OutPort_D, PCVal,CVal,mdatain,
	ZVal,ALUVal_D);
	 
	 
	 
	 /*input clk, reset, ba_out, gra, grb, grc, rin, rout, read, write, con_in,
	mdr_in, hi_in, lo_in, zhigh_in, zlo_in, pc_in, inport_in, inc_pc, y_in, ir_in, mar_in,
	hi_out, lo_out, zhigh_out, zlo_out, pc_out, mdr_out, inport_out, c_sign_extended_out, r2_in,	input [31:0] human_in, input [1:0] mdr_read,
	input [3:0] control, output[31:0] zhigh_d, zlow_d, output[4:0] code, 
	output[31:0] r0_q, r1_q, r2_q, r3_q, r4_q, r5_q, r6_q, r7_q, r8_q, r9_q, r10_q, r11_q, r12_q, r13_q, 
	r14_q, r15_q, hi, lo, zhigh, zlo, pc, mdr, in_port, c_sign_extended, y_out, ir_q, mar_q, output[31:0] out);*/
	 
	reg [4:0] Present_state = Default;

	 
	initial
		begin
			clk = 0;
			forever #10 clk = ~clk;
		end
	
	always @(negedge clk) // finite state machine; if clock rising-edge
		begin
			case (Present_state)
			Default : Present_state <= PC_load1a;
				PC_load1a : Present_state <= PC_load1b;
				PC_load1b : Present_state <= T0;			
				
				T0 : Present_state <= T1;
				T1 : Present_state <= T2;
				T2 : Present_state <= T3;
				T3 : Present_state <= T4;
				T4 : Present_state <= T5;
				T5 : Present_state <= T6;
				T6 : Present_state <= T7;

			endcase
	 end
	 
	 always @(Present_state) // do the required job in each state
	begin
		//ld r1, 85	
		case (Present_state) // assert the required signals in each clock cycle
			Default: begin
				pc_out <= 0; zlo_out <= 0; mar_in <= 0; zlo_in <= 0; ir_in <= 0;
				mdr_out <= 0; mdr_in <= 0; mdr_read <= 2'b00; pc_in <= 0; inc_pc <= 0; 
				y_in <= 0; control <= 4'b0;
				end
			PC_load1a: begin //0
				human_in <= 32'd3;
				mdr_read <= 2'b10; mdr_in <= 1;
				end
			PC_load1b: begin //20
				mdr_in <= 0;
				mdr_out <= 1; pc_in <=1;
			end
			T0: begin
				read <= 0; write <= 0;
				pc_out <= 1; mar_in <= 1; inc_pc <= 1; zlo_in <= 1;
			end
			T1: begin
				pc_out <= 0; inc_pc <= 0;
				zlo_out <= 1; pc_in <= 1;
				read <= 1; write <= 0;
				mdr_read <= 2'b01; mdr_in <= 1;
			end
			T2: begin
				read <= 0; mdr_in <= 0;
				zlo_out <= 0; pc_in <= 0; //reset
				ir_in <= 1; mdr_out <= 1;   
			end
			T3: begin
				ir_in <= 0; mdr_out <= 0;
				grb <= 1; gra <= 0; grc <= 0; ba_out <= 1; y_in <= 1;
			end
			T4: begin
				grb <= 0; ba_out <= 0; y_in <= 0;
				 c_sign_extended_out <= 1; control <= 4'd8; zlo_in <= 1;
			end
			
			T5: begin
				c_sign_extended_out <= 0; zlo_in <= 0;
				zlo_out <= 1; mar_in <= 1;
			end
			
			T6: begin
				zlo_out <= 0; mar_in <= 0;
				read <= 1; write <= 0;
				mdr_in <= 1; mdr_read <= 2'b01;
			end
			
			T7: begin
				mdr_in <= 0; read <= 0;
				mdr_out <= 1; gra <= 1; rin <= 1;
			end
		
		
				
		
		endcase
		end
	endmodule
	 

		
	